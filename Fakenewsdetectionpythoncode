#importing all neccessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

#loading and preprocessing dataset
# Load the dataset
df = pd.read_csv('news.csv')

# Drop irrelevant columns
df = df.drop(['title'], axis=1)

# remove null values
df = df.dropna()

# reset index after dropping rows
df = df.reset_index(drop=True)

# display first few rows of the DataFrame
print(df.head())

#splitting the data into training and testing sets
X=df['text']
y=df['label']
# split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#converting text data into numerical features using TF-IDF vectorization
# initialize TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# fit and transform the training set
tfidf_train = tfidf_vectorizer.fit_transform(X_train)

# transform the test set
tfidf_test = tfidf_vectorizer.transform(X_test)

#training the passive aggrasive classifier
# initialize Passive Aggressive Classifier
pac = PassiveAggressiveClassifier(max_iter=50)

# train the classifier
pac.fit(tfidf_train, y_train)

# predict on the test set
y_pred = pac.predict(tfidf_test)

# calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

#evaluate the model
#calculate confusion matrix
confusion_mat = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(confusion_mat)

 
